import { useState, useEffect } from 'react';

export default function useLocaStorage(key, defaultValue) {
  const [state, setState] = useState(() => {
    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;
  });

  useEffect(() => {
    window.localStorage.setItem(key, JSON.stringify(state));
  }, [key, state]);

  return [state, setState];
}

// Функція useLocalStorage(key, defaultValue) приймає два параметри:
// key: це рядок, який використовується як ключ для зберігання даних в локальному сховищі.
// defaultValue: це значення за замовчуванням, яке буде використовуватися, якщо відповідного ключа немає у локальному сховищі.
// const [state, setState] = useState(() => { ... });
// Використовується хук useState для створення стану, який міститиме дані з локального сховища або значення за замовчуванням.
// Ініціалізація відбувається за допомогою функції зворотного виклику () => { ... }, яка виконується лише під час початкової
//  ініціалізації компонента. Функція спробує витягнути дані з локального сховища за ключем key і розпарсити їх з формату JSON.
// Якщо дані не вдається отримати або розпарсити, буде використовуватися значення defaultValue.
// useEffect(() => { ... }, [key, state]);
// Хук useEffect використовується для спостереження за змінами ключа key та стану state. Коли вони змінюються, функція
// викликається. У цьому випадку, код у функції useEffect зберігає поточне значення state в локальному сховищі під відповідним
// ключем key.
// return [state, setState];
// Функція повертає масив, де перший елемент - це поточне значення стану state, а другий елемент - це функція setState,
// яку можна використовувати для зміни значення стану.

// Загалом, цей хук useLocalStorage дозволяє зручно зберігати та зчитувати дані в локальному сховищі браузера, використовуючи
// стандартні React-хуки useState та useEffect.
